#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4
#
# Copyright (c) 2011 Intel, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; version 2 of the License
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import sys
import re

from gitbuildsys.__version__ import VERSION
from gitbuildsys import msger, cmdln, errors

def handle_repository(option, opt_str, value, parser):
    if not value:
        raise errors.Usage("option %s: need value" % opt_str)
    if value[0] == '-':
        raise errors.Usage("option %s: invalid value %s" % (opt_str, value))
    if getattr(parser.values, option.dest) is None:
        setattr(parser.values, option.dest, [])
    getattr(parser.values, option.dest).append(value)

def handle_project(option, opt_str, value, parser):
    if not value:
        raise errors.Usage("option %s: need value" % opt_str)
    if value[0] == '-':
        raise errors.Usage("option %s: invalid project name %s, can not " \
                           "start with '-'" % (opt_str, value))
    if not re.match(r'^(\w|:|\.|-)+$', value):
        raise errors.Usage("option %s: invalid project name %s, only word " \
                           "character, ':', '.' and '-' supportted" \
                           % (opt_str, value))
    setattr(parser.values, option.dest, value)

class Gbs(cmdln.Cmdln):
    """
    Usage: gbs [GLOBAL-OPTS] SUBCOMMAND [OPTS] [ARGS...]

    gbs - the command line tool for Tizen package developers
    Try 'gbs help SUBCOMAND' for help on a specific subcommand.

    ${command_list}
    global ${option_list}
    ${help_list}
    """

    name = 'gbs'
    version = VERSION

    def get_optparser(self):
        optparser = cmdln.CmdlnOptionParser(self, version=self.version)
        optparser.add_option('-d', '--debug', action='store_true',
                                              dest='debug',
                                              help='print debug message')
        optparser.add_option('-v', '--verbose', action='store_true',
                                                dest='verbose',
                                                help='verbose information')
        return optparser

    def postoptparse(self):
        if self.options.verbose:
            msger.set_loglevel('verbose')

        if self.options.debug:
            msger.set_loglevel('debug')

    @cmdln.alias('sr')
    @cmdln.option('--changelog',
                  action='store_true',
                  default=False,
                  dest='changelog',
                  help='invoke gbs changelog to create changelog')
    @cmdln.option('-m', '--msg',
                  default=None,
                  dest='msg',
                  help='specify commit message info')
    @cmdln.option('--tag',
                  action='store_true',
                  default=False,
                  help='make a tag before submit')
    @cmdln.option('--branch',
                  default='master',
                  dest='target_branch',
                  help='specify the target branch for submit')

    def do_submit(self, _subcmd, opts, *args):
        """${cmd_name}: submit commit request to gerrit for review

        Usage:
            gbs submit [-m] [--changelog] [--tag] [--branch]

        Note:

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_submit as cmd
        cmd.do(opts, args)

    @cmdln.alias('ex')
    @cmdln.option('-o', '--outdir',
                  default=None,
                  dest='outdir',
                  help='Output directory')
    @cmdln.option('--spec',
                  default=None,
                  dest='spec',
                  help='Specify a spec file to use')
    def do_export(self, _subcmd, opts, *args):
        """${cmd_name}: export files and prepare for build

        Usage:
            gbs export

        Note:

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_export as cmd
        cmd.do(opts, args)

    @cmdln.alias('lb')
    @cmdln.option('-D', '--dist',
                  default=None,
                  dest='dist',
                  help='Specify distribution configure file, which should' \
                       'be full path')
    @cmdln.option('-R', '--repository',
                  action="callback",
                  default=None,
                  type='string',
                  dest='repositories',
                  callback=handle_repository,
                  help='Specify package repositories, Supported format ' \
                       'is rpm-md')
    @cmdln.option('-B', '--buildroot',
                  default=None,
                  dest='buildroot',
                  help='Specify build rootdir to setup chroot environment')
    @cmdln.option('-A', '--arch',
                  default=None,
                  dest='arch',
                  help='build target arch ')
    @cmdln.option('-C', '--clean',
                  action='store_true',
                  default=False,
                  dest='clean',
                  help='Delete old build root before initializing it')
    @cmdln.option('--noinit',
                  action='store_true',
                  default=False,
                  dest='noinit',
                  help='Skip initialization of build root and start ' \
                       'with build immediately')
    @cmdln.option('--ccache',
                  action="store_true",
                  default=False,
                  dest='ccache',
                  help='Use ccache to speed up rebuilds')
    @cmdln.option('-I', '--incremental',
                  action="store_true",
                  default=False,
                  dest='incremental',
                  help='Do incremental build, which need support of spec file,'
                       ' and tar ball unpack stage should be enabled with the '
                       'condition of RPM macro RSYNCDONE')
    @cmdln.option('--spec',
                  default=None,
                  dest='spec',
                  help='Specify a spec file to use')
    @cmdln.option('--debuginfo',
                  action='store_true',
                  default=False,
                  dest='debuginfo',
                  help='Enable build debuginfo sub-packages')
    def do_build(self, _subcmd, opts, *args):
        """${cmd_name}: local build package

        Usage:
            gbs build -R repository -A ARCH [options] [package git dir]

            [package git dir] is optional, if not specified, current dir wuold
            be used.

        Examples:
            gbs build -R http://example1.org/packages/ \\
                           -R http://example2.org/packages/ \\
                           -A i586                          \\
                           -D /usr/share/gbs/tizen-1.0.conf

        Note:

        if -D not specified, distconf key in ~/.gbs.conf would be used.
        If distconf key is None, dist conf file would be got  from  OBS
        project (Tizen:Main by default).

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_build as cmd
        cmd.do(opts, args)


    @cmdln.alias('rb')
    @cmdln.option('-T', '--target-obsprj',
                  action='callback',
                  default=None,
                  dest='target_obsprj',
                  type='string',
                  callback=handle_project,
                  help='OBS target project being used to build package, ' \
                       'use "home:<userid>:gbs:Tizen:Main" if not specified')
    @cmdln.option('-B', '--base-obsprj',
                  action='callback',
                  default=None,
                  dest='base_obsprj',
                  type='string',
                  callback=handle_project,
                  help='Base OBS project being used to branch from, ' \
                       'use "Tizen:Main" if not specified')
    @cmdln.option('--spec',
                  default=None,
                  dest='spec',
                  help='Specify a spec file to use')
    def do_remotebuild(self, subcmd, opts, *args):
        """${cmd_name}: remote build package

        Usage:
            gbs remotebuild [options] [package git dir]

            [package git dir] is optional, if not specified, current dir wuold
            be used.

        Examples:
          $ gbs remotebuild
          $ gbs remotebuild -B Test
          $ gbs remotebuild -B Test -T home:<userid>:gbs
          $ gbs remotebuild <package git directory>
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_remotebuild as cmd
        cmd.do(opts, args)


    @cmdln.alias('im')
    @cmdln.option('--author-name',
                  default=None,
                  dest='author_name',
                  help='author name of git commit')
    @cmdln.option('--author-email',
                  default=None,
                  dest='author_email',
                  help='author email of git commit')
    @cmdln.option('--upstream_branch',
                  default='upstream',
                  dest='upstream_branch',
                  help='specify upstream branch for new version of package')
    @cmdln.option('--no-merge',
                  action='store_true',
                  default=False,
                  dest='no_merge',
                  help='Don\'t merge new upstream branch to master')
    def do_import(self, subcmd, opts, *args):
        """${cmd_name}: Import spec file/source rpm/tar ball to git repository

        Usage:
            gbs import [options] specfile | source rpm | tar ball


        Examples:
          $ gbs import /path/to/specfile/
          $ gbs import /path/to/src.rpm
          $ gbs import /path/to/tarball
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_import as cmd
        cmd.do(opts, args)


    @cmdln.alias('ch')
    @cmdln.option('-s', '--since',
                  default=None,
                  dest='since',
                  help='commit to start from')
    def do_changelog(self, _subcmd, opts, *args):
        """${cmd_name}: update the changelog file with the git commit messages

        Usage:
            gbs changelog [--since]

        Examples:
          $ gbs changelog
          $ gbs changelog --since=COMMIT_ID
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_changelog as cmd
        cmd.do(opts, args)


if __name__ == '__main__':
    try:
        sys.exit(Gbs().main())

    except KeyboardInterrupt:
        msger.error('\n^C catched, program aborted.')

    except errors.Usage, usage:
        msger.error(str(usage))

    except errors.Abort, msg:
        msger.info(str(msg))

    except errors.CmdError, err:
        if msger.get_loglevel() == 'debug':
            import traceback
            msger.error(traceback.format_exc())
        else:
            msger.error('\n'+str(err))
