#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4
#
# Copyright (c) 2011 Intel, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; version 2 of the License
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import os, sys
import io
import ConfigParser

from gitbuildsys.__version__ import VERSION
from gitbuildsys import msger, cmdln, errors, utils, runner
from gitbuildsys.conf import configmgr

def _fall_to_shell(cmdname):
    def raw_wrapper(f):
        return f

    def sh_wrapper(f):
        def _run_embed_sh(self, argv):
            # this command is a shell script wrapper
            shpath = os.path.join(utils.get_share_dir(), cmdname + '.sh')
            cmdlist = ['bash', shpath]
            if msger.get_loglevel() == 'debug':
                cmdlist.append('-d')
            elif msger.get_loglevel() == 'verbose':
                cmdlist.append('-v')
            runner.embed(cmdlist + list(argv)[1:])
        return _run_embed_sh

    cmdmod = 'gitbuildsys.cmd_' + cmdname
    try:
        __import__(cmdmod)
        return raw_wrapper
    except ImportError:
        return sh_wrapper

class TizenPkg(cmdln.Cmdln):
    """
    Usage: gbs [GLOBAL-OPTS] SUBCOMMAND [OPTS] [ARGS...]

    gbs - the command line tool for Tizen package developers
    Try 'gbs help SUBCOMAND' for help on a specific subcommand.

    ${command_list}
    global ${option_list}
    ${help_list}
    """

    name = 'gbs'
    version = VERSION

    def get_optparser(self):
        optparser = cmdln.CmdlnOptionParser(self, version=self.version)
        optparser.add_option('-d', '--debug', action='store_true', dest='debug', help='print debug message')
        optparser.add_option('-v', '--verbose', action='store_true', dest='verbose', help='verbose information')
        return optparser

    def postoptparse(self):
        if self.options.verbose:
            msger.set_loglevel('verbose')

        if self.options.debug:
            msger.set_loglevel('debug')

    @cmdln.alias("bl")
    @cmdln.option('-p', '--obsprj', default='',
                  help='The corresponding project name in remote OBS server. ' \
                       'If not specified, "home:<userid>:branches:Trunk" will' \
                       ' be used.')
    @_fall_to_shell('build')
    def do_build(self, subcmd, opts, *args):
        """${cmd_name}: test building for current pkg

        Usage:
            gbs build [OBS_project]

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_build as cmd
        cmd.do(opts, args)

    @cmdln.alias("pk")
    @cmdln.option('-s', '--silent', action='store_true',
                  help='run in slient mode')
    @_fall_to_shell('packaging')
    def do_packaging(self, subcmd, opts, *args):
        """${cmd_name}: prepare packaging files for current pkg

        Usage:
            gbs packaging

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_packaging as cmd
        cmd.do(opts, args)

    @_fall_to_shell('import')
    def do_import(self, subcmd, opts, *args):
        """${cmd_name}: import new tarballs for current pkg

        Usage:
            gbs import

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_import as cmd
        cmd.do(opts, args)

    @cmdln.alias("cfg")
    @cmdln.option('-s', '--section', metavar='SECTION', default='general',
                  help='specify the section inside config file, default as "general"')
    def do_getconfig(self, subcmd, opts, *args):
        """${cmd_name}: query values of config file

        Usage:
            gbs getconfig <opt1> [<opt2> ...]

        ${cmd_option_list}
        """

        if not args:
            raise errors.Usage('argument(s) expected')

        for arg in args:
            val = configmgr.get(arg, section=opts.section)
            if val:
                msger.verbose('The value of opt "%s" in [%s] is:' % (arg, opts.section))
                msger.raw(val)
            else:
                msger.verbose('No value for opt key "%s" in [%s]' % (arg, opts.section))
                msger.raw('') # we need a blank line

if __name__ == '__main__':
    try:
        mic = TizenPkg()
        sys.exit(mic.main())

    except KeyboardInterrupt:
        msger.error('\n^C catched, program aborted.')

    except errors.Usage, usage:
        msger.error(str(usage))

    except errors.Abort, msg:
        msger.info(str(msg))

    except errors.CmdError, err:
        if msger.get_loglevel() == 'debug':
            import traceback
            msger.error(traceback.format_exc())
        else:
            msger.error('\n'+str(err))
