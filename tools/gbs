#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4
#
# Copyright (c) 2011 Intel, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; version 2 of the License
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 59
# Temple Place - Suite 330, Boston, MA 02111-1307, USA.

import os
import sys

from gitbuildsys.__version__ import VERSION
from gitbuildsys import msger, cmdln, errors, utils, runner
from gitbuildsys.conf import configmgr

def _fall_to_shell(cmdname):
    def raw_wrapper(name):
        return name

    def sh_wrapper(_name):
        def _run_embed_sh(_self, argv):
            # this command is a shell script wrapper
            shpath = os.path.join(utils.get_share_dir(), cmdname + '.sh')
            cmdlist = ['bash', shpath]
            if msger.get_loglevel() == 'debug':
                cmdlist.append('-d')
            elif msger.get_loglevel() == 'verbose':
                cmdlist.append('-v')
            runner.embed(cmdlist + list(argv)[1:])
        return _run_embed_sh

    cmdmod = 'gitbuildsys.cmd_' + cmdname
    try:
        __import__(cmdmod)
        return raw_wrapper
    except ImportError:
        return sh_wrapper

class Gbs(cmdln.Cmdln):
    """
    Usage: gbs [GLOBAL-OPTS] SUBCOMMAND [OPTS] [ARGS...]

    gbs - the command line tool for Tizen package developers
    Try 'gbs help SUBCOMAND' for help on a specific subcommand.

    ${command_list}
    global ${option_list}
    ${help_list}
    """

    name = 'gbs'
    version = VERSION

    def get_optparser(self):
        optparser = cmdln.CmdlnOptionParser(self, version=self.version)
        optparser.add_option('-d', '--debug', action='store_true',
                                              dest='debug',
                                              help='print debug message')
        optparser.add_option('-v', '--verbose', action='store_true',
                                                dest='verbose',
                                                help='verbose information')
        return optparser

    def postoptparse(self):
        if self.options.verbose:
            msger.set_loglevel('verbose')

        if self.options.debug:
            msger.set_loglevel('debug')

    @cmdln.alias('lb')
    @cmdln.option('-D', '--dist',
                  default=None,
                  dest='dist',
                  help='Specify distribution configure file, which should' \
                       'be full path')
    @cmdln.option('-R', '--repository',
                  action='append',
                  default=None,
                  type='string',
                  dest='repositories',
                  help='Specify package repositories, Supported format ' \
                       'is rpm-md')
    @cmdln.option('-B', '--buildroot',
                  default=None,
                  dest='buildroot',
                  help='Specify build rootdir to setup chroot environment')
    @cmdln.option('-A', '--arch',
                  default=None,
                  dest='arch',
                  help='build target arch ')
    @cmdln.option('-C', '--clean',
                  action='store_true',
                  default=False,
                  dest='clean',
                  help='Delete old build root before initializing it')
    @cmdln.option('--noinit',
                  action='store_true',
                  default=False,
                  dest='noinit',
                  help='Skip initialization of build root and start ' \
                       'with build immediately')
    @cmdln.option('--debuginfo',
                  action='store_true',
                  default=False,
                  dest='debuginfo',
                  help='Enable build debuginfo sub-packages')
    def do_localbuild(self, _subcmd, opts, *args):
        """${cmd_name}: local build package

        Usage:
            gbs localbuild -R repository -A ARCH [options] [package git dir]

            [package git dir] is optional, if not specified, current dir wuold
            be used.

        Examples:
            gbs localbuild -R http://example1.org/packages/ \\
                           -R http://example2.org/packages/ \\
                           -A i586                          \\
                           -D /usr/share/gbs/tizen-1.0.conf

        Note:

        if -D not specified, distconf key in ~/.gbs.conf would be used.
        If distconf key is None, dist conf file would be got  from  OBS
        project (Trunk by default).

        ${cmd_option_list}
        """

        from gitbuildsys import cmd_localbuild as cmd
        cmd.do(opts, args)


    @cmdln.alias('bl')
    @cmdln.option('-T', '--target-obsprj',
                  default=None,
                  dest='target_obsprj',
                  help='OBS target project being used to build package, ' \
                       'use "home:<userid>:gbs:Trunk" if not specified')
    @cmdln.option('-B', '--base-obsprj',
                  default=None,
                  dest='base_obsprj',
                  help='Base OBS project being used to branch from, ' \
                       'use "Trunk" if not specified')
    @_fall_to_shell('build')
    def do_build(self, _subcmd, opts, *args):
        """${cmd_name}: test building for current pkg

        Usage:
            gbs build [options] [package git dir]

            [package git dir] is optional, if not specified, current dir wuold
            be used.

        Examples:
          $ gbs build
          $ gbs build -B Test
          $ gbs build -B Test -T home:<userid>:gbs
          $ gbs build <package git directory>
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_build as cmd
        cmd.do(opts, args)


    @cmdln.alias('im')
    @cmdln.option('--author-name',
                  default=None,
                  dest='author_name',
                  help='author name of git commit')
    @cmdln.option('--author-email',
                  default=None,
                  dest='author_email',
                  help='author email of git commit')
    @cmdln.option('--tag',
                  action='store_true',
                  default=False,
                  dest='tag',
                  help='Create tag while import new upstream tar ball')
    @cmdln.option('--upstream_branch',
                  default=None,
                  dest='upstream_branch',
                  help='specify upstream branch for new version of package')
    @cmdln.option('--no-merge',
                  action='store_true',
                  default=False,
                  dest='no_merge',
                  help='Don\'t merge new upstream branch to master')
    def do_import(self, subcmd, opts, *args):
        """${cmd_name}: Import spec file/source rpm/tar ball to git repository

        Usage:
            gbs import [options] specfile | source rpm | tar ball


        Examples:
          $ gbs import /path/to/specfile/
          $ gbs import /path/to/src.rpm
          $ gbs import /path/to/tarball
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_import as cmd
        cmd.do(opts, args)


    @cmdln.alias('ch')
    @cmdln.option('-s', '--since',
                  default=None,
                  dest='since',
                  help='commit to start from')
    def do_changelog(self, subcmd, opts, *args):
        """${cmd_name}: update the changelog file with the git commit messages

        Usage:
            gbs changelog [--since]

        Examples:
          $ gbs changelog
          $ gbs changelog --since=COMMIT_ID
        ${cmd_option_list}
        """

        from gitbuildsys import cmd_changelog as cmd
        cmd.do(opts, args)

    @cmdln.alias('cfg')
    @cmdln.option('-s', '--section',
                        metavar='SECTION',
                        default='general',
                        help='specify the section inside config file, ' \
                             'use "general" as the default')
    def do_getconfig(self, _subcmd, opts, *args):
        """${cmd_name}: query values of config file

        Usage:
            gbs getconfig <opt1> [<opt2> ...]

        ${cmd_option_list}
        """

        if not args:
            raise errors.Usage('argument(s) expected')

        for arg in args:
            val = configmgr.get(arg, section=opts.section)
            if val:
                msger.verbose('The value of opt "%s" in [%s] is:' \
                              % (arg, opts.section))
                msger.raw(val)
            else:
                msger.verbose('No value for opt key "%s" in [%s]' \
                              % (arg, opts.section))
                msger.raw('') # we need a blank line

if __name__ == '__main__':
    try:
        sys.exit(Gbs().main())

    except KeyboardInterrupt:
        msger.error('\n^C catched, program aborted.')

    except errors.Usage, usage:
        msger.error(str(usage))

    except errors.Abort, msg:
        msger.info(str(msg))

    except errors.CmdError, err:
        if msger.get_loglevel() == 'debug':
            import traceback
            msger.error(traceback.format_exc())
        else:
            msger.error('\n'+str(err))
